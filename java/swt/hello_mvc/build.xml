<?xml version="1.0" encoding="UTF-8" ?>

<!--
http://ant.apache.org/manual/CoreTasks/copy.html

Important Encoding Note:
The reason that binary files when filtered get corrupted is that filtering
involves reading in the file using a Reader class. This has an encoding
specifing how files are encoded. There are a number of different types of
encoding - UTF-8, UTF-16, Cp1252, ISO-8859-1, US-ASCII and (lots) others. On
Windows the default character encoding is Cp1252, on Unix it is usually UTF-8.
For both of these encoding there are illegal byte sequences (more in UTF-8
than for Cp1252).

How the Reader class deals with these illegal sequences is up to the
implementation of the character decoder. The current Sun Java implemenation is
to map them to legal characters. Previous Sun Java (1.3 and lower) threw a
MalformedInputException. IBM Java 1.4 also thows this exception. It is the
mapping of the characters that cause the corruption.

On Unix, where the default is normally UTF-8, this is a big problem, as it is
easy to edit a file to contain non US Ascii characters from ISO-8859-1, for
example the Danish oe character. When this is copied (with filtering) by Ant,
the character get converted to a question mark (or some such thing).

There is not much that Ant can do. It cannot figure out which files are binary
- a UTF-8 version of Korean will have lots of bytes with the top bit set. It is
not informed about illegal character sequences by current Sun Java
implementions.

One trick for filtering containing only US-ASCII is to use the ISO-8859-1
encoding. This does not seem to contain illegal character sequences, and the
lower 7 bits are US-ASCII. Another trick is to change the LANG environment
variable from something like "us.utf8" to "us". 
-->

<project name="HelloSwt" basedir="." default="jar">

    <!-- ========== PROPERTIES ========== -->

    <!-- PROPERTIES (LOCAL) -->
    <property name="project_name" value="hello_swt" />
    <property name="main_class" value="org.jdhp.snippets.swt.HelloSwt" />
    <property name="package_names" value="org.jdhp.snippets.*" />
    <property name="data_path" value="org/jdhp/snippets/swt/data" />

    <!-- PROPERTIES (GLOBAL) -->
    <property name="src_dir" value="${basedir}/src" />
    <property name="class_dir" value="${basedir}/bin" />
    <property name="lib_dir" value="${basedir}/ext/lib" />
    <property name="javadoc_dir" value="${basedir}/doc/javadoc" />
    <property name="dist_dir" value="${basedir}/dist" />
    <property name="dist_project_dir" value="${dist_dir}/${project_name}" />
    <property name="dist_project_lib_dir" value="${dist_project_dir}/lib" />
    <property name="src_data_dir" value="${src_dir}/${data_path}" />
    <property name="class_data_dir" value="${class_dir}/${data_path}" />

    <property name="jar_file" value="${basedir}/${project_name}.jar" />
    <property name="dist_file" value="${dist_dir}/${project_name}.zip" />
    <property name="run_script_file" value="${basedir}/${project_name}" />

    <!-- PROPERTIES (LIBS) -->
    <!-- <property name="swt_lib" value="swt-3.7.2-gtk-linux-x86_64.jar" /> -->
    <property name="swt_lib" value="swt-3.7.2-gtk-linux-x86.jar" />

    <property name="classpath" value="${class_dir}:${lib_dir}/${swt_lib}" />
    <property name="jar_classpath" value="./ ./lib/${swt_lib}" />

    <!-- ========== TARGETS ========== -->

    <!-- TARGET BUILD -->
    <target name="build" description="Build class files">
        <echo>Generate class files</echo>
        
        <delete dir="${class_dir}" />
        <mkdir dir="${class_dir}" />

        <!-- To avoid error messages if ${src_data_dir} doesn't exists -->
        <mkdir dir="${src_data_dir}" />

        <!-- Copy data files -->
        <mkdir dir="${class_data_dir}" />
        <copy todir="${class_data_dir}">
            <fileset dir="${src_data_dir}" excludes="**/*.java" />
        </copy>
        
        <!-- Build classes -->
        <javac srcdir="${src_dir}" destdir="${class_dir}" classpath="${classpath}" includeantruntime="false" />
    </target>

    <!-- TARGET JAR -->
    <target name="jar" depends="build" description="Generate the jar file">
        <echo>Generate the jar file</echo>
        <delete file="${jar_file}" />
        <jar destfile="${jar_file}" basedir="${class_dir}">
            <manifest>
                <attribute name="Main-Class" value="${main_class}" />
                <attribute name="Class-Path" value="${jar_classpath}" />
            </manifest>
        </jar>
    </target>

    <!-- TARGET DIST -->
    <target name="dist" depends="jar" description="Generate the dist file">
        <echo>Generate the dist directories</echo>

        <!-- Generate the dist directories -->
        <delete dir="${dist_dir}" />
        <mkdir dir="${dist_dir}" />
        <mkdir dir="${dist_project_dir}" />
        <mkdir dir="${dist_project_lib_dir}" />

        <!-- Copy run script -->
        <copy file="${run_script_file}" todir="${dist_project_dir}" />

        <!-- To avoid error messages if ${lib_dir} doesn't exists -->
        <mkdir dir="${lib_dir}" />

        <!-- Copy libraries -->
        <copy todir="${dist_project_lib_dir}">
            <fileset dir="${lib_dir}"/>
        </copy>

        <!-- Copy JAR file -->
        <copy file="${jar_file}" todir="${dist_project_dir}" />

        <!-- Generate the dist file -->
        <echo>Generate the dist file</echo>
        <delete file="${dist_file}" />
        <zip basedir="${dist_dir}" destfile="${dist_file}" />
    </target>

    <!-- TARGET DOC -->
    <target name="doc" description="Generate documentation">
        <echo>Generate documentation</echo>

        <delete dir="${javadoc_dir}" />
        <mkdir dir="${javadoc_dir}" />
        
        <!-- Generate documentation -->
        <javadoc sourcepath="${src_dir}" destdir="${javadoc_dir}" packagenames="${package_names}" />
    </target>

    <!-- TARGET CLEAN -->
    <target name="clean" description="Remove class and doc directories and jar and dist files">
        <echo>Remove class and doc directories and jar and dist files</echo>
        <delete dir="${class_dir}" />
        <delete dir="${javadoc_dir}" />
        <delete file="${jar_file}" />
        <delete file="${dist_file}" />
        <delete dir="${dist_project_dir}" />
        <delete dir="${dist_dir}" />
    </target>

    <!-- TARGET RUN -->
    <target name="run" depends="build" description="Run the project">
        <echo>Run the project</echo>
        <java classpath="${classpath}" classname="${main_class}" fork="true" />
    </target>

    <!-- TARGET HELP -->
    <target name="help" description="Display help">
        <echo>build     generate class files</echo>
        <echo>jar       generate the jar file</echo>
        <echo>doc       generate documentation</echo>
        <echo> </echo>
        <echo>clean     remove class and doc directories and jar and dist files</echo>
        <echo>dist      generate the dist file (dist/${project_name}.zip)</echo>
        <echo>run       run the project</echo>
        <echo> </echo>
        <echo>help      display this message</echo>
    </target>

</project>
